"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateSeederCommand = void 0;
const core_1 = require("@mikro-orm/core");
const CLIHelper_1 = require("../CLIHelper");
class CreateSeederCommand {
    constructor() {
        this.command = 'seeder:create <seeder>';
        this.describe = 'Create a new seeder class';
        this.builder = (args) => {
            args.positional('seeder', {
                describe: 'Name for the seeder class. (e.g. "test" will generate "TestSeeder" or "TestSeeder" will generate "TestSeeder")',
            });
            args.demandOption('seeder');
            return args;
        };
    }
    /**
     * @inheritDoc
     */
    async handler(args) {
        const seederName = CreateSeederCommand.getSeederClassName(args.seeder);
        const orm = await CLIHelper_1.CLIHelper.getORM(undefined);
        const seeder = orm.getSeeder();
        const path = await seeder.createSeeder(seederName);
        CLIHelper_1.CLIHelper.dump(core_1.colors.green(`Seeder ${args.seeder} successfully created at ${path}`));
        await orm.close(true);
    }
    /**
     * Will return a seeder name that is formatted like this EntitySeeder
     * @param seedName
     * @private
     */
    static getSeederClassName(seedName) {
        const seedNameMatches = seedName.match(/(.+)(seeder)/i);
        if (seedNameMatches) {
            seedName = seedNameMatches[1];
        }
        const seedNameSplit = seedName.split('-');
        return seedNameSplit.map(name => {
            return name.charAt(0).toUpperCase() + name.slice(1);
        }).join('') + 'Seeder';
    }
}
exports.CreateSeederCommand = CreateSeederCommand;
